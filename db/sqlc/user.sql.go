// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (uuid, first_name, last_name, birthday, address, phone) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, uuid, first_name, last_name, birthday, address, phone, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Uuid      string         `db:"uuid"`
	FirstName sql.NullString `db:"first_name"`
	LastName  sql.NullString `db:"last_name"`
	Birthday  sql.NullTime   `db:"birthday"`
	Address   sql.NullString `db:"address"`
	Phone     sql.NullString `db:"phone"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Uuid,
		arg.FirstName,
		arg.LastName,
		arg.Birthday,
		arg.Address,
		arg.Phone,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.FirstName,
		&i.LastName,
		&i.Birthday,
		&i.Address,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getOneUser = `-- name: GetOneUser :one
SELECT first_name, last_name, birthday, address, phone, created_at FROM users WHERE uuid = $1 AND deleted_at IS NULL
`

type GetOneUserRow struct {
	FirstName sql.NullString `db:"first_name"`
	LastName  sql.NullString `db:"last_name"`
	Birthday  sql.NullTime   `db:"birthday"`
	Address   sql.NullString `db:"address"`
	Phone     sql.NullString `db:"phone"`
	CreatedAt time.Time      `db:"created_at"`
}

func (q *Queries) GetOneUser(ctx context.Context, uuid string) (GetOneUserRow, error) {
	row := q.db.QueryRowContext(ctx, getOneUser, uuid)
	var i GetOneUserRow
	err := row.Scan(
		&i.FirstName,
		&i.LastName,
		&i.Birthday,
		&i.Address,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT first_name, last_name, birthday, address, phone, created_at
FROM users
WHERE first_name LIKE $1
OR last_name LIKE $1
AND deleted_at IS NULL
ORDER BY created_at ASC
OFFSET $2
LIMIT $3
`

type ListUsersParams struct {
	FirstName sql.NullString `db:"first_name"`
	Offset    int32          `db:"offset"`
	Limit     int32          `db:"limit"`
}

type ListUsersRow struct {
	FirstName sql.NullString `db:"first_name"`
	LastName  sql.NullString `db:"last_name"`
	Birthday  sql.NullTime   `db:"birthday"`
	Address   sql.NullString `db:"address"`
	Phone     sql.NullString `db:"phone"`
	CreatedAt time.Time      `db:"created_at"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.FirstName, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.FirstName,
			&i.LastName,
			&i.Birthday,
			&i.Address,
			&i.Phone,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE users SET  deleted_at = 'now()' WHERE uuid = $1
`

func (q *Queries) SoftDeleteUser(ctx context.Context, uuid string) error {
	_, err := q.db.ExecContext(ctx, softDeleteUser, uuid)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET first_name = $2, last_name = $3, birthday = $4, address = $5, phone = $6, updated_at = 'now()'
WHERE uuid = $1 AND deleted_at IS NULL
RETURNING id, uuid, first_name, last_name, birthday, address, phone, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	Uuid      string         `db:"uuid"`
	FirstName sql.NullString `db:"first_name"`
	LastName  sql.NullString `db:"last_name"`
	Birthday  sql.NullTime   `db:"birthday"`
	Address   sql.NullString `db:"address"`
	Phone     sql.NullString `db:"phone"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Uuid,
		arg.FirstName,
		arg.LastName,
		arg.Birthday,
		arg.Address,
		arg.Phone,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.FirstName,
		&i.LastName,
		&i.Birthday,
		&i.Address,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
