// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: session.sql

package db

import (
	"context"
	"time"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (uuid, refresh_token, user_agent, client_id, expired_at)
VALUES ($1, $2, $3, $4, $5) RETURNING id, uuid, refresh_token, user_agent, client_id, is_blocked, expired_at, created_at
`

type CreateSessionParams struct {
	Uuid         string    `db:"uuid"`
	RefreshToken string    `db:"refresh_token"`
	UserAgent    string    `db:"user_agent"`
	ClientID     string    `db:"client_id"`
	ExpiredAt    time.Time `db:"expired_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.Uuid,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientID,
		arg.ExpiredAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientID,
		&i.IsBlocked,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE uuid = $1
`

func (q *Queries) DeleteSession(ctx context.Context, uuid string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, uuid)
	return err
}
